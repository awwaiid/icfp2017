#!/usr/bin/env perl6

use lib 'src';
use JSON::Fast;
use Msg;
use Game;

my @last_move;
my @states;

# Run with a map
multi MAIN( IO() :map($mapfile) where :e, :out($outfile), :$pause=False, *@bots ) {
  my $map = from-json($mapfile.slurp);
  my $player_count = @bots.elems;
  my $game = Game.new(
    map => $map,
    punters => $player_count
  );
  @states = initialize-bots($game, @bots);
  play-game(@bots, $game, $outfile, $pause);
  send-score(@bots, $game);
}

sub initialize-bots($game, @bots) {
  my @states;

  # Say hi to each bot
  for @bots.kv -> $id, $bot {
    my $bot-app = start-bot($bot);

    # P → S {"me" : name}
    my $identification = client-get($bot-app);

    # S → P {"you" : name}
    client-send($bot-app, { you => $identification<me> });

    # S → P {"punter" : p, "punters" : n, "map" : map}
    client-send($bot-app, {
      punter => $id,
      punters => @bots.elems,
      map    => $game.map
    });

    # P → S {"ready" : p, "state" : state}
    my $response = client-get($bot-app);
    if !$response<ready>.defined || $id !== $response<ready> {
      die "Error: Expected bot to reply with 'ready'. Got {to-json $response}";
    }

    @states.push($response<state> || {});

    stop-bot($bot-app);
  }

  @states;
}

sub play-game(@bots, $game, $outfile, $pause) {
  my @a = ();
  spurt $outfile, "";
  # repeat for r turns (number of rivers)
  # keep track of recent move for each player
  # send recent moves to player
  # get new move from player
  # update our own map so that we can give it to them if we want and so we can score the result and so we can turn moves into passes

  my $player_count = @bots.elems;
  my $river_count = $game.map<rivers>.elems;

  for ^$player_count -> $id {
    @last_move[$id] = { pass => { punter => $id } };
  }

  @a.push: {move => { moves => @last_move.clone }, state => @states[0]}
  for ^$river_count -> $move_number {
    my $player_id = $move_number % $player_count; # maybe wrong for zombies

    my $bot-app = start-bot(@bots[$player_id]);

    # P → S {"me" : name}
    my $identification = client-get($bot-app);

    # S → P {"you" : name}
    client-send($bot-app, { you => $identification<me> });

    # S → P {"move" : {"moves" : moves}, "state" : state}
    client-send($bot-app, {
      move => { moves => @last_move },
      state => @states[$player_id]
    });


    # P → S move ] {"state" : state}
    my $move = client-get($bot-app);
    @states[$player_id] = $move<state> || {};
    $move<state>:delete; # delete the state


    say "Move $move_number player $player_id action { to-json $move, :!pretty }";
    $game.make-move($player_id, $move);

    # todo: see if the move is valid, switch to Pass otherwise
    @last_move[$player_id] = $move;

    stop-bot($bot-app);
    @a.push: {move => { moves => @last_move.clone }, state => @states[$player_id]}
    if $pause { say "Press Enter to continue"; $*IN.get; spurt $outfile, (to-json @a, :!pretty) ~ "\n"; }
  }
  spurt $outfile, (to-json @a, :!pretty) ~ "\n";
}

sub send-score(@bots, $game) {
  my @scores = $game.score;

  $*ERR.say("Score: { to-json @scores, :!pretty }");

  for @bots.kv -> $player_id, $bot {
    my $bot-app = start-bot($bot);

    # P → S {"me" : name}
    my $identification = client-get($bot-app);

    # S → P {"you" : name}
    client-send($bot-app, { you => $identification<me> });

    # S → P {"stop" : {"moves" : moves, "scores" : scores}, "state" : state}
    client-send($bot-app, {
      stop => {
        moves => @last_move,
        scores => @scores[$player_id]
      },
      state => @states[$player_id]
    });
    stop-bot($bot-app);
  }
}

sub start-bot($bot) {
  shell "bots/metabot '$bot'", :in, :out;
}

sub stop-bot($bot-app) {
  $bot-app.in.close;
  $bot-app.out.close;
}

